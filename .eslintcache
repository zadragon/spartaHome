[{"C:\\Lab\\react\\210203\\friend-test\\src\\index.js":"1","C:\\Lab\\react\\210203\\friend-test\\src\\Ranking.js":"2","C:\\Lab\\react\\210203\\friend-test\\src\\App.js":"3","C:\\Lab\\react\\210203\\friend-test\\src\\Score.js":"4","C:\\Lab\\react\\210203\\friend-test\\src\\Message.js":"5","C:\\Lab\\react\\210203\\friend-test\\src\\redux\\modules\\quiz.js":"6","C:\\Lab\\react\\210203\\friend-test\\src\\SwipeItem.js":"7","C:\\Lab\\react\\210203\\friend-test\\src\\Start.js":"8","C:\\Lab\\react\\210203\\friend-test\\src\\Quiz.js":"9","C:\\Lab\\react\\210203\\friend-test\\src\\redux\\modules\\rank.js":"10","C:\\Lab\\react\\210203\\friend-test\\src\\redux\\configStore.js":"11","C:\\Lab\\react\\210203\\friend-test\\src\\Spinner.js":"12","C:\\Lab\\react\\210203\\friend-test\\src\\firebase.js":"13","C:\\Lab\\react\\210203\\friend-test\\src\\reportWebVitals.js":"14"},{"size":689,"mtime":1612486347153,"results":"15","hashOfConfig":"16"},{"size":4238,"mtime":1612489168029,"results":"17","hashOfConfig":"16"},{"size":1467,"mtime":1612487524397,"results":"18","hashOfConfig":"16"},{"size":2657,"mtime":1612487536474,"results":"19","hashOfConfig":"16"},{"size":3855,"mtime":1612489177995,"results":"20","hashOfConfig":"16"},{"size":2069,"mtime":1612487489179,"results":"21","hashOfConfig":"16"},{"size":6398,"mtime":1612488603345,"results":"22","hashOfConfig":"16"},{"size":3170,"mtime":1612487570829,"results":"23","hashOfConfig":"16"},{"size":2521,"mtime":1612488516742,"results":"24","hashOfConfig":"16"},{"size":4807,"mtime":1612489134204,"results":"25","hashOfConfig":"16"},{"size":492,"mtime":1612489146844,"results":"26","hashOfConfig":"16"},{"size":460,"mtime":1612489208404,"results":"27","hashOfConfig":"16"},{"size":676,"mtime":1612492689921,"results":"28","hashOfConfig":"16"},{"size":362,"mtime":1606983094074,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"r1x508",{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Lab\\react\\210203\\friend-test\\src\\index.js",[],["62","63"],"C:\\Lab\\react\\210203\\friend-test\\src\\Ranking.js",["64"],"import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { resetAnswer } from \"./redux/modules/quiz\";\r\nimport {getRankFB} from \"./redux/modules/rank\";\r\n\r\nimport Spinner from \"./Spinner\";\r\n\r\nconst Ranking = (props) => {\r\n    const dispatch = useDispatch();\r\n    const _ranking = useSelector((state) => state.rank.ranking);\r\n    const is_loaded = useSelector((state) => state.rank.is_loaded);\r\n    // Array 내장 함수 sort로 정렬하자!\r\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\r\n\r\n\r\n    const user_rank = React.useRef(null);\r\n\r\n    React.useEffect(() => {\r\n        dispatch(getRankFB());\r\n        if(!user_rank.current){\r\n            return;\r\n        }\r\n\r\n        window.scrollTo({top: user_rank.current.offsetTop, left: 0, behavior: \"smooth\"});\r\n    }, []);\r\n    const ranking = _ranking.sort((a, b) => {\r\n        // 높은 수가 맨 앞으로 오도록!\r\n        return b.score - a.score;\r\n    });\r\n\r\n    if(!is_loaded){\r\n        return (<Spinner/>);\r\n    }\r\n\r\n    return (\r\n        <RankContainer>\r\n            <Topbar>\r\n                <p>\r\n                    <span>{ranking.length}명</span>의 사람들 중 당신은?\r\n                </p>\r\n            </Topbar>\r\n\r\n            <RankWrap>\r\n                {ranking.map((r, idx) => {\r\n                    if (r.current) {\r\n                        return (\r\n                            <RankItem key={idx} highlight={true} ref={user_rank}>\r\n                                <RankNum>{idx + 1}등</RankNum>\r\n                                <RankUser>\r\n                                    <p>\r\n                                        <b>{r.name}</b>\r\n                                    </p>\r\n                                    <p>{r.message}</p>\r\n                                </RankUser>\r\n                            </RankItem>\r\n                        );\r\n                    }\r\n\r\n                    return (\r\n                        <RankItem key={idx}>\r\n                            <RankNum>{idx + 1}등</RankNum>\r\n                            <RankUser>\r\n                                <p>\r\n                                    <b>{r.name}</b>\r\n                                </p>\r\n                                <p>{r.message}</p>\r\n                            </RankUser>\r\n                        </RankItem>\r\n                    );\r\n                })}\r\n            </RankWrap>\r\n\r\n            <Button\r\n                onClick={() => {\r\n                    dispatch(resetAnswer());\r\n                    window.location.href = \"/\";\r\n                }}\r\n            >\r\n                다시 하기\r\n            </Button>\r\n        </RankContainer>\r\n    );\r\n};\r\n\r\nconst RankContainer = styled.div`\r\n  width: 100%;\r\n  padding-bottom: 100px;\r\n`;\r\n\r\nconst Topbar = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100vw;\r\n  min-height: 50px;\r\n  border-bottom: 1px solid #ddd;\r\n  background-color: #fff;\r\n  & > p {\r\n    text-align: center;\r\n  }\r\n\r\n  & > p > span {\r\n    border-radius: 30px;\r\n    background-color: #fef5d4;\r\n    font-weight: 600;\r\n    padding: 4px 8px;\r\n  }\r\n`;\r\n\r\nconst RankWrap = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  margin-top: 58px;\r\n`;\r\n\r\nconst RankItem = styled.div`\r\n  width: 80vw;\r\n  margin: 8px auto;\r\n  display: flex;\r\n  border-radius: 5px;\r\n  border: 1px solid #ddd;\r\n  padding: 8px 16px;\r\n  align-items: center;\r\n  background-color: ${(props) => (props.highlight ? \"#ffd6aa\" : \"#ffffff\")};\r\n`;\r\n\r\nconst RankNum = styled.div`\r\n  text-align: center;\r\n  font-size: 2em;\r\n  font-weight: 600;\r\n  padding: 0px 16px 0px 0px;\r\n  border-right: 1px solid #ddd;\r\n`;\r\n\r\nconst RankUser = styled.div`\r\n  padding: 8px 16px;\r\n  text-align: left;\r\n  & > p {\r\n    &:first-child > b {\r\n      border-bottom: 2px solid #212121;\r\n    }\r\n    margin: 0px 0px 8px 0px;\r\n  }\r\n`;\r\n\r\nconst Button = styled.button`\r\n  position: fixed;\r\n  bottom: 5vh;\r\n  left: 0;\r\n  padding: 8px 24px;\r\n  background-color: ${(props) => (props.outlined ? \"#ffffff\" : \"#dadafc\")};\r\n  border-radius: 30px;\r\n  margin: 0px 10vw;\r\n  border: 1px solid #dadafc;\r\n  width: 80vw;\r\n`;\r\n\r\nexport default Ranking;","C:\\Lab\\react\\210203\\friend-test\\src\\App.js",["65"],"C:\\Lab\\react\\210203\\friend-test\\src\\Score.js",["66","67","68"],"C:\\Lab\\react\\210203\\friend-test\\src\\Message.js",["69","70"],"import React from \"react\";\r\nimport img from \"./scc_img01.png\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { addRank, addRankFB } from \"./redux/modules/rank\";\r\n\r\nconst Message = (props) => {\r\n    const dispatch = useDispatch();\r\n    const name = useSelector((state) => state.quiz.name);\r\n    const answers = useSelector((state) => state.quiz.answers);\r\n    const user_name = useSelector((state) => state.rank.user_name);\r\n\r\n    const input_text = React.useRef(null);\r\n    // 정답만 걸러내기\r\n    let correct = answers.filter((answer) => {\r\n        return answer;\r\n    });\r\n\r\n    // 점수 계산하기\r\n    let score = (correct.length / answers.length) * 100;\r\n\r\n    // 컬러셋 참고: https://www.shutterstock.com/ko/blog/pastel-color-palettes-rococo-trend/\r\n    return (\r\n        <div\r\n            style={{\r\n                display: \"flex\",\r\n                height: \"100vh\",\r\n                width: \"100vw\",\r\n                overflow: \"hidden\",\r\n                padding: \"16px\",\r\n                boxSizing: \"border-box\",\r\n            }}\r\n        >\r\n            <div\r\n                className=\"outter\"\r\n                style={{\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                    justifyContent: \"center\",\r\n                    flexDirection: \"column\",\r\n                    height: \"100vh\",\r\n                    width: \"100vw\",\r\n                    overflow: \"hidden\",\r\n                    padding: \"0px 10vw\",\r\n                    boxSizing: \"border-box\",\r\n                    maxWidth: \"400px\",\r\n                    margin: \"0px auto\",\r\n                }}\r\n            >\r\n                <img\r\n                    src={img}\r\n                    style={{ width: \"80%\", margin: \"-70px 16px 48px 16px\" }}\r\n                />\r\n                <h1 style={{ fontSize: \"1.5em\", margin: \"0px\", lineHeight: \"1.4\" }}>\r\n          <span\r\n              style={{\r\n                  backgroundColor: \"#fef5d4\",\r\n                  padding: \"5px 10px\",\r\n                  borderRadius: \"30px\",\r\n              }}\r\n          >\r\n            {name}\r\n          </span>\r\n                    에게 한마디\r\n                </h1>\r\n                <input\r\n                    ref={input_text}\r\n                    type=\"text\"\r\n                    style={{\r\n                        padding: \"10px\",\r\n                        margin: \"24px 0px\",\r\n                        border: \"1px solid #dadafc\",\r\n                        borderRadius: \"30px\",\r\n                        width: \"100%\",\r\n                    }}\r\n                    placeholder=\"한 마디 적기\"\r\n                />\r\n                <button\r\n                    onClick={() => {\r\n                        let rank_info = {\r\n                            score: parseInt(score),\r\n                            name: user_name,\r\n                            message: input_text.current.value,\r\n                            current: true,\r\n                        };\r\n                        // 랭킹 정보 넣기\r\n                        // dispatch(addRank(rank_info));\r\n\r\n                        dispatch(addRankFB(rank_info));\r\n                        // 주소 이동\r\n                        // 시간 차를 두고 이동 시켜줘요.\r\n                        window.setTimeout(() => {\r\n                            props.history.push(\"/ranking\");\r\n                        }, 1000);\r\n\r\n                    }}\r\n                    style={{\r\n                        padding: \"8px 24px\",\r\n                        backgroundColor: \"#dadafc\",\r\n                        borderRadius: \"30px\",\r\n                        border: \"#dadafc\",\r\n                    }}\r\n                >\r\n                    한마디하고 랭킹 보러 가기\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Message;","C:\\Lab\\react\\210203\\friend-test\\src\\redux\\modules\\quiz.js",[],"C:\\Lab\\react\\210203\\friend-test\\src\\SwipeItem.js",["71","72","73","74","75","76"],"C:\\Lab\\react\\210203\\friend-test\\src\\Start.js",["77"],"C:\\Lab\\react\\210203\\friend-test\\src\\Quiz.js",["78","79","80"],"C:\\Lab\\react\\210203\\friend-test\\src\\redux\\modules\\rank.js",["81","82"],"import {firestore} from \"../../firebase\";\r\n\r\nconst rank_db = firestore.collection(\"rank\");\r\n// Actions\r\n\r\n// 유저 이름을 바꾼다\r\nconst ADD_USER_NAME = \"rank/ADD_USER_NAME\";\r\n// 유저 메시지를 바꾼다\r\nconst ADD_USER_MESSAGE = \"rank/ADD_USER_MESSAGE\";\r\n// 랭킹정보를 추가한다\r\nconst ADD_RANK = \"rank/ADD_RANK\";\r\n// 랭킹정보를 가져온다\r\nconst GET_RANK = \"rank/GET_RANK\";\r\n\r\nconst IS_LOADED = \"rank/IS_LOADED\";\r\n\r\nconst initialState = {\r\n    user_name: \"\",\r\n    user_message: \"\",\r\n    user_score: \"\",\r\n    score_text: {\r\n        60: \"우린 친구! 앞으로도 더 친하게 지내요! :)\",\r\n        80: \"우와! 우리는 엄청 가까운 사이!\",\r\n        100: \"둘도 없는 단짝이에요! :)\",\r\n    },\r\n    ranking: [],\r\n    is_loaded: false,\r\n};\r\n\r\n// Action Creators\r\nexport const addUserName = (user_name) => {\r\n    return { type: ADD_USER_NAME, user_name };\r\n};\r\n\r\nexport const addUserMessage = (user_message) => {\r\n    return { type: ADD_USER_MESSAGE, user_message };\r\n};\r\n\r\nexport const addRank = (rank_info) => {\r\n    return { type: ADD_RANK, rank_info };\r\n};\r\n\r\nexport const getRank = (rank_list) => {\r\n    return { type: GET_RANK, rank_list };\r\n};\r\n\r\nexport const isLoaded = (loaded) => {\r\n    return {type: IS_LOADED, loaded};\r\n}\r\n\r\nexport const addRankFB = (rank_info) => {\r\n    return function (dispatch) {\r\n        // 데이터를 저장할 동안 스피너가 뜨도록 해줍시다.\r\n        dispatch(isLoaded(false));\r\n\r\n        let rank_data = {\r\n            message: rank_info.message,\r\n            name: rank_info.name,\r\n            score: rank_info.score,\r\n        };\r\n        rank_db.add(rank_data).then((doc) => {\r\n            // id를 콘솔로 확인해볼까요?\r\n            console.log(doc.id);\r\n            // id를 추가해요!\r\n            // current는 여기서 추가해줘야 해요! 그래야 내가 한 것만 하이라이트를 줄 수 있거든요. (db에 current가 true로 들어가면 안됩니다!)\r\n            rank_data = { ...rank_data, id: doc.id, current: true };\r\n            // 데이터를 추가해줘요!\r\n            dispatch(addRank(rank_data));\r\n\r\n        });\r\n    };\r\n}\r\n\r\n\r\nexport const getRankFB = () => {\r\n    return function (dispatch){\r\n\r\n        dispatch(isLoaded(false));\r\n\r\n        rank_db.get().then((docs) => {\r\n            let rank_data = [];\r\n\r\n            docs.forEach((doc) => {\r\n                // console.log(doc.data());\r\n                rank_data = [...rank_data, {id: doc.id, ...doc.data()}];\r\n            });\r\n\r\n            dispatch(getRank(rank_data));\r\n            dispatch(isLoaded(true));\r\n\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\n// Reducer\r\nexport default function reducer(state = initialState, action = {}) {\r\n    switch (action.type) {\r\n        // do reducer stuff\r\n        case \"rank/ADD_USER_NAME\": {\r\n            return { ...state, user_name: action.user_name };\r\n        }\r\n\r\n        case \"rank/ADD_USER_MESSAGE\": {\r\n            return { ...state, user_message: action.user_message };\r\n        }\r\n\r\n        case \"rank/ADD_RANK\": {\r\n            return { ...state, ranking: [...state.ranking, action.rank_info] };\r\n        }\r\n\r\n        case \"rank/GET_RANK\": {\r\n\r\n            // 리덕스에 있던 데이터에 파이어베이스에서 가져온 데이터를 추가해요! 다만, 같은 값이 있으면 안되겠죠??\r\n            // 중복되지 않은 데이터만 추가해줄거예요.\r\n            // id가 같은 지 아닌 지로 데이터를 구분해서 추가해볼게요.\r\n\r\n            // 일단 랭킹 데이터를 담을 변수를 만들고, 기존 리덕스 값을 가져다가 넣어줍니다.\r\n            let ranking_data = [...state.ranking];\r\n\r\n            // 랭킹 데이터의 id 배열을 하나 만들어줍니다.\r\n            const rank_ids = state.ranking.map((r, idx) => {\r\n                return r.id;\r\n            });\r\n            // 콘솔로 확인해볼까요! :)\r\n            console.log(rank_ids);\r\n\r\n            // 리덕스에 없는 데이터만 가져오기\r\n            const rank_data_fb = action.rank_list.filter((r, idx) => {\r\n                // 가지고 온 값의 id가 리덕스에 있는 아이디 배열에 없으면 추가해요!\r\n                if(rank_ids.indexOf(r.id) === -1){\r\n                    // 배열에도 이렇게 스프레드 문법을 사용할 수 있습니다. :) (다른 방법으로 추가하셔도 됩니다.)\r\n                    ranking_data = [...ranking_data, r];\r\n                }\r\n            });\r\n            // 데이터 확인해보기!\r\n            console.log(ranking_data);\r\n\r\n            return { ...state, ranking: ranking_data };\r\n        }\r\n\r\n        case \"rank/IS_LOADED\": {\r\n            return {...state, is_loaded: action.loaded};\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","C:\\Lab\\react\\210203\\friend-test\\src\\redux\\configStore.js",[],"C:\\Lab\\react\\210203\\friend-test\\src\\Spinner.js",["83"],"C:\\Lab\\react\\210203\\friend-test\\src\\firebase.js",[],"C:\\Lab\\react\\210203\\friend-test\\src\\reportWebVitals.js",[],{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":27,"column":8,"nodeType":"90","endLine":27,"endColumn":10,"suggestions":"91"},{"ruleId":"92","severity":1,"message":"93","line":1,"column":8,"nodeType":"94","messageId":"95","endLine":1,"endColumn":12},{"ruleId":"92","severity":1,"message":"96","line":4,"column":23,"nodeType":"94","messageId":"95","endLine":4,"endColumn":34},{"ruleId":"92","severity":1,"message":"97","line":5,"column":9,"nodeType":"94","messageId":"95","endLine":5,"endColumn":16},{"ruleId":"98","severity":1,"message":"99","line":25,"column":43,"nodeType":"100","messageId":"101","endLine":25,"endColumn":45},{"ruleId":"92","severity":1,"message":"97","line":4,"column":10,"nodeType":"94","messageId":"95","endLine":4,"endColumn":17},{"ruleId":"102","severity":1,"message":"103","line":49,"column":17,"nodeType":"104","endLine":52,"endColumn":19},{"ruleId":"88","severity":1,"message":"105","line":19,"column":28,"nodeType":"106","endLine":19,"endColumn":35},{"ruleId":"88","severity":1,"message":"107","line":21,"column":26,"nodeType":"108","endLine":26,"endColumn":14},{"ruleId":"88","severity":1,"message":"109","line":42,"column":32,"nodeType":"110","endLine":42,"endColumn":59},{"ruleId":"92","severity":1,"message":"111","line":129,"column":13,"nodeType":"94","messageId":"95","endLine":129,"endColumn":25},{"ruleId":"88","severity":1,"message":"112","line":147,"column":23,"nodeType":"94","endLine":147,"endColumn":30},{"ruleId":"102","severity":1,"message":"103","line":153,"column":13,"nodeType":"104","endLine":153,"endColumn":30},{"ruleId":"102","severity":1,"message":"103","line":39,"column":17,"nodeType":"104","endLine":42,"endColumn":19},{"ruleId":"98","severity":1,"message":"113","line":41,"column":32,"nodeType":"100","messageId":"114","endLine":41,"endColumn":34},{"ruleId":"98","severity":1,"message":"113","line":52,"column":32,"nodeType":"100","messageId":"114","endLine":52,"endColumn":34},{"ruleId":"92","severity":1,"message":"115","line":93,"column":7,"nodeType":"94","messageId":"95","endLine":93,"endColumn":15},{"ruleId":"92","severity":1,"message":"116","line":130,"column":19,"nodeType":"94","messageId":"95","endLine":130,"endColumn":31},{"ruleId":"98","severity":1,"message":"117","line":130,"column":67,"nodeType":"100","messageId":"101","endLine":130,"endColumn":69},{"ruleId":"102","severity":1,"message":"103","line":8,"column":13,"nodeType":"104","endLine":8,"endColumn":30},"no-native-reassign",["118"],"no-negated-in-lhs",["119"],"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["120"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'useDispatch' is defined but never used.","'addRank' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","Assignments to the 'swipe_status' variable from inside React Hook React.useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside React.useEffect.","Literal","Assignments to the 'coordinate' variable from inside React Hook React.useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside React.useEffect.","ObjectExpression","Assignments to the 'target_classname' variable from inside React Hook React.useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside React.useEffect.","MemberExpression","'swipe_status' is assigned a value but never used.","The ref value 'swipe_div.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'swipe_div.current' to a variable inside the effect, and use that variable in the cleanup function.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'DragItem' is assigned a value but never used.","'rank_data_fb' is assigned a value but never used.","Array.prototype.filter() expects a return value from arrow function.","no-global-assign","no-unsafe-negation",{"desc":"121","fix":"122"},"Update the dependencies array to be: [dispatch]",{"range":"123","text":"124"},[877,879],"[dispatch]"]